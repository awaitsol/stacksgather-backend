// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id          Int @default(autoincrement()) @id
  first_name  String
  last_name   String
  email       String @unique
  password    String
  profile     String? @db.LongText
  role        Role @default(USER)
  createdBy   Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
}

model Tag {
  id        Int @default(autoincrement()) @id
  title     String @db.VarChar(255)
  slug      String @db.VarChar(255)
  articles  ArticleTags[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

model Category {
  id        Int @default(autoincrement()) @id
  title     String @db.VarChar(255)
  thumbnail String? @db.LongText
  parent_id Int?
  slug      String @db.VarChar(255)
  articles  ArticleCategories[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Article {
  id                Int @default(autoincrement()) @id
  title             String @db.VarChar(255)
  description       String? @db.Text
  short_description  String? @db.Text
  thumbnail         String? @db.LongText
  meta_description  String? @db.Text
  slug              String @db.VarChar(255)
  categories        ArticleCategories[]
  tags              ArticleTags[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("articles")
}

model ArticleCategories {
  articleId  Int
  categoryId Int

  article    Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([articleId, categoryId])

  @@map("article_categories")
}

model ArticleTags {
  articleId Int
  tagId     Int

  article   Article  @relation(fields: [articleId], references: [id])
  tag       Tag @relation(fields: [tagId], references: [id])

  @@id([articleId, tagId])

  @@map("article_tags")
}

model File {
  id            Int @default(autoincrement()) @id
  originalName  String
  fileName      String
  mimeType      String
  size          Int
  destination   String
  updatedAt     DateTime @updatedAt

  @@map("files")
}